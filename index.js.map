{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["// @ts-nocheck\n\n\nfunction getToggleButton() {\n  return document.getElementById(\"toggleVAD\")\n}\n\n\nconst hivemind_connection = new JarbasHiveMind()\n\n\nhivemind_connection.sendAudioB64 = async function (base64) {\n     let payload = {\n        'type': \"recognizer_loop:b64_audio\",\n        \"data\": {\"audio\": base64},\n        \"context\": {\n            \"source\": \"javascript\",\n            \"destination\": \"HiveMind\",\n            \"platform\": \"JarbasHivemindJsV0.1\"\n        }\n    };\n    await hivemind_connection.sendMessage({\n        'msg_type': \"bus\",\n        \"payload\": payload\n    });\n\n}\n\nhivemind_connection.onHiveConnected = function () {\n    window.alert(\"Connected to HiveMind!\")\n};\n\nhivemind_connection.onMycroftSpeak = function (mycroft_message) {\n    let utterance = mycroft_message.data.utterance;\n    const speechList = document.getElementById(\"audio-list\")\n    const entry = document.createElement(\"p\")\n    entry.textContent = \"HiveMind says: \" + utterance\n    speechList.prepend(entry)\n}\n\nhivemind_connection.onHiveDisconnected = function () {\n    window.alert(\"Hivemind connection lost...\")\n};\n\n\nwindow.hivemind_connection = hivemind_connection\n\nwindow.onConnect = () => {\n    console.log(\"connectin to HM\")\n    let ip = document.getElementById(\"hmip\").value\n    let port = document.getElementById(\"hmport\").value\n    let key = document.getElementById(\"hmkey\").value\n    let crypto_key = document.getElementById(\"hmcrypto\").value\n    let user = \"HivemindWebSpeechV0.1\"\n    hivemind_connection.connect(ip, port, user, key, crypto_key);\n\n    window.toggleVAD()\n    getToggleButton().disabled = false\n    getToggleButton().classList.remove(\"is-loading\")\n}\n\nasync function main() {\n\n  try {\n\n    const myvad = await vad.MicVAD.new({\n\n      onSpeechStart: () => {\n        console.log(\"Speech start\")\n      },\n\n      onSpeechEnd: (arr) => {\n        console.log(\"Speech end\")\n        const wavBuffer = vad.utils.encodeWAV(arr)\n        console.log(arr)\n        console.log(wavBuffer)\n        const base64 = vad.utils.arrayBufferToBase64(wavBuffer)\n        const url = `data:audio/wav;base64,${base64}`\n        const el = addAudio(url)\n        const speechList = document.getElementById(\"audio-list\")\n        speechList.prepend(el)\n\n        window.hivemind_connection.sendAudioB64(base64)\n\n      },\n    })\n\n    window.myvad = myvad\n\n\n    window.toggleVAD = () => {\n      console.log(\"ran toggle vad\")\n      if (myvad.listening === false) {\n        myvad.start()\n        getToggleButton().textContent = \"Stop VAD\"\n      } else {\n        myvad.pause()\n        getToggleButton().textContent = \"Start VAD\"\n      }\n    }\n  } catch (e) {\n    console.error(\"Failed:\", e)\n  }\n\n  function addAudio(audioUrl) {\n    const entry = document.createElement(\"li\")\n    const audio = document.createElement(\"audio\")\n    audio.controls = true\n    audio.src = audioUrl\n    entry.appendChild(audio)\n    return entry\n  }\n}\n\nmain()\n"],
  "mappings": ";;AAGA,WAAS,kBAAkB;AACzB,WAAO,SAAS,eAAe,WAAW;AAAA,EAC5C;AAGA,MAAM,sBAAsB,IAAI,eAAe;AAG/C,sBAAoB,eAAe,eAAgB,QAAQ;AACtD,QAAI,UAAU;AAAA,MACX,QAAQ;AAAA,MACR,QAAQ,EAAC,SAAS,OAAM;AAAA,MACxB,WAAW;AAAA,QACP,UAAU;AAAA,QACV,eAAe;AAAA,QACf,YAAY;AAAA,MAChB;AAAA,IACJ;AACA,UAAM,oBAAoB,YAAY;AAAA,MAClC,YAAY;AAAA,MACZ,WAAW;AAAA,IACf,CAAC;AAAA,EAEL;AAEA,sBAAoB,kBAAkB,WAAY;AAC9C,WAAO,MAAM,wBAAwB;AAAA,EACzC;AAEA,sBAAoB,iBAAiB,SAAU,iBAAiB;AAC5D,QAAI,YAAY,gBAAgB,KAAK;AACrC,UAAM,aAAa,SAAS,eAAe,YAAY;AACvD,UAAM,QAAQ,SAAS,cAAc,GAAG;AACxC,UAAM,cAAc,oBAAoB;AACxC,eAAW,QAAQ,KAAK;AAAA,EAC5B;AAEA,sBAAoB,qBAAqB,WAAY;AACjD,WAAO,MAAM,6BAA6B;AAAA,EAC9C;AAGA,SAAO,sBAAsB;AAE7B,SAAO,YAAY,MAAM;AACrB,YAAQ,IAAI,iBAAiB;AAC7B,QAAI,KAAK,SAAS,eAAe,MAAM,EAAE;AACzC,QAAI,OAAO,SAAS,eAAe,QAAQ,EAAE;AAC7C,QAAI,MAAM,SAAS,eAAe,OAAO,EAAE;AAC3C,QAAI,aAAa,SAAS,eAAe,UAAU,EAAE;AACrD,QAAI,OAAO;AACX,wBAAoB,QAAQ,IAAI,MAAM,MAAM,KAAK,UAAU;AAE3D,WAAO,UAAU;AACjB,oBAAgB,EAAE,WAAW;AAC7B,oBAAgB,EAAE,UAAU,OAAO,YAAY;AAAA,EACnD;AAEA,iBAAe,OAAO;AAEpB,QAAI;AAEF,YAAM,QAAQ,MAAM,IAAI,OAAO,IAAI;AAAA,QAEjC,eAAe,MAAM;AACnB,kBAAQ,IAAI,cAAc;AAAA,QAC5B;AAAA,QAEA,aAAa,CAAC,QAAQ;AACpB,kBAAQ,IAAI,YAAY;AACxB,gBAAM,YAAY,IAAI,MAAM,UAAU,GAAG;AACzC,kBAAQ,IAAI,GAAG;AACf,kBAAQ,IAAI,SAAS;AACrB,gBAAM,SAAS,IAAI,MAAM,oBAAoB,SAAS;AACtD,gBAAM,MAAM,yBAAyB,MAAM;AAC3C,gBAAM,KAAK,SAAS,GAAG;AACvB,gBAAM,aAAa,SAAS,eAAe,YAAY;AACvD,qBAAW,QAAQ,EAAE;AAErB,iBAAO,oBAAoB,aAAa,MAAM;AAAA,QAEhD;AAAA,MACF,CAAC;AAED,aAAO,QAAQ;AAGf,aAAO,YAAY,MAAM;AACvB,gBAAQ,IAAI,gBAAgB;AAC5B,YAAI,MAAM,cAAc,OAAO;AAC7B,gBAAM,MAAM;AACZ,0BAAgB,EAAE,cAAc;AAAA,QAClC,OAAO;AACL,gBAAM,MAAM;AACZ,0BAAgB,EAAE,cAAc;AAAA,QAClC;AAAA,MACF;AAAA,IACF,SAAS,GAAG;AACV,cAAQ,MAAM,WAAW,CAAC;AAAA,IAC5B;AAEA,aAAS,SAAS,UAAU;AAC1B,YAAM,QAAQ,SAAS,cAAc,IAAI;AACzC,YAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,YAAM,WAAW;AACjB,YAAM,MAAM;AACZ,YAAM,YAAY,KAAK;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AAEA,OAAK;",
  "names": []
}
